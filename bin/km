#!/bin/bash
set +x

version=v0.0.1-beta5
programname=$0
red="$(tput setaf 1)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"

session_duration=${SESSION_DURATION:-900}

MAIN(){
  if [ "${add}" != "true" ] && [ -z "${import_kubeconfig}" ] && kubectl config current-context > /dev/null
  then
    test_mfa
  fi

  if [ "${generate_mfa}" == "true" ] && [ -z "${import_kubeconfig}" ]
  then
    if [ ! -f ${temp_mfa_file} ]
    then
      echo 100 > ${temp_mfa_file}
    fi
    timestamp=`cat ${temp_mfa_file}`
    expired_timestamp=$(($timestamp + $session_duration - 300))
    current_timestamp=$(date +"%s")
  fi

  if [ "${add}" != "true" ] && [ "${generate_mfa}" == "true" ] && [ -z "${import_kubeconfig}" ] && ! (( $expired_timestamp > $current_timestamp ))
  then
    create_new_session || exit 1
  fi

  if [ "${add}" == "true" ]
  then
    test_duplicates || exit 1
    add_cluster || exit 1
    change_cluster_name
    set_kubectl_iam_auth
  elif [ ! -z "${import_kubeconfig}" ]
  then
    echo "import"
    import_kubeconfig ${import_kubeconfig}
  elif [ ! -z "${cluster}" ]
  then
    change_cluster_context
  elif [ "${get_context}" == "true" ]
  then
    kubectl config get-contexts
  elif [ "${change_namespace}" == "true" ]
  then
    change_namespace_context
  elif echo "$update" | grep -q "now"
  then
    update_km $update
  elif echo "$update" | grep -q "check"
  then
    update_km $update
  else
    kubectl_all
  fi
}

usage() {
  message_green "
 Km is a thin wrapper for kubectl which helps with the EKS kubeconfig management.
 Any other command not listed below will be proxied to local kubectl so km
 can be used in the same way as kubectl.

 Usage: $programname [add | --region region --profile profile --cluster-name EKS-cluster-name ]

[add]
 --region (mandatory)           - AWS region
 --profile (mandatory)          - AWS Profile (IAM Role) as it is in the ~/.aws/credentials
 --cluster-name (mandatory)     - cluster name
 --cluster-alias (optional)     - becomes mandatory if a cluster with the same name already exists
 --iam-role (optional)          - becomes mandatory if the role cannot be pulled from ~/.aws/credentials
 --kubectl-exec-args            - default token,-i,cluster_name,-r,iam_role
 --mfa-profile                  - if MFA is enabled specify the account name used.
                                  If Yubikey is installed the mfa-profile needs to match
                                  the Yubico Authenticator account name. If the same name is used for
                                  the AWS sso account in the ~/.aws/credentials then it will be used
                                  also to generate the STS keys, if not the default
                                  profile ~/.aws/credentials will be used.

[update]
 --now                          - update km from master branch or append a version
 --check                        - check for the latest version on the master branch

[single options]
 --change-cluster|cc            - change cluster context
 --change-namespace|cn|cns      - change namespace context on the current cluster
 --get-context|gc               - get the current context
 --version                      - get the current ketl version
 --exec                         - will prompt for a list of containers to exec to.
 --logs                         - will prompt for a list of containers to tail the logs from
 --import-kubeconfig            - import another cluster from a kubeconfig file.
                                  As arg specify the path to the new KUBECONFIG.
  "
}

error() {
  echo -e "${red}[ERROR] $@ $(tput sgr0)"
}

message_green() {
  echo -e "${green}$@ $(tput sgr0)"
}

message_yellow() {
  echo -e "${yellow}$@ $(tput sgr0)"
}

all_args=$@

while [ $# -gt 0 ]; do
  # set the variable from input for all the arguments
  input+=("$1")
  # set variables from input
  case "$1" in
    --update|update)
      if [ -n "$2" ]; then
        update="$2 $3"
        shift
      else
        update=check
      fi
      ;;
    --profile)
      if [ -n "$2" ]; then
        profile=$2
        aws_eks_args+="--profile ${profile} "
        shift
      fi
      ;;
    --cluster-name)
      if [ -n "$2" ]; then
        cluster_name="${2}"
        aws_eks_args+="--name ${cluster_name} "
        shift
      fi
      ;;
    --cluster-alias)
      if [ -n "$2" ]; then
        cluster_alias="${2}"
        shift
      fi
      ;;
    --region)
      if [ -n "$2" ]; then
        region="$2"
        aws_eks_args+="--region ${region} "
        shift
      fi
      ;;
    --iam-role)
      if [ -n "$2" ]; then
        iam_role="$2"
        shift
      fi
      ;;
    --mfa-profile)
      if [ -n "$2" ]; then
        mfa_profile="$2"
        shift
      fi
      ;;
    --change-cluster|change-cluster|--cc|cc)
      cluster=true
      ;;
    --change-namespace|change-namespace|change-ns|--cn|--cns|cn|cns)
      change_namespace=true
      namespace=${2}
      ;;
    --get-context|get-context|--gc|gc)
      get_context="true"
      ;;
    --kubectl-exec-args)
    if [ -n "$2" ]; then
      kubectl_exec_args="${2}"
      shift
    fi
      ;;
    --add|add)
      if [ -n "$2" ]; then
        add="true"
      fi
      ;;
    --import-kubeconfig|import-kubeconfig)
      if [ -n "$2" ]; then
        import_kubeconfig="$2"
      fi
      ;;
    -v|--version|version)
      message_green "version: $version"
      exit 0
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      command="$all_args"
      break
  esac
  shift
done

unameOut="$(uname -s)"
case "${unameOut}" in
  Darwin*)
    base64=gbase64
    ed=ged
    sed=gsed
    grep=ggrep
    ;;
  *)
    base64=base64
    ed=ed
    sed=sed
    grep=grep
    ;;
esac

change_cluster_context(){
  current_cluster="$(kubectl config current-context)"
  selected=$((kubectl config view -o jsonpath="{.contexts[?(@.name != '${current_cluster}')].name}" | \
            xargs -n 1; echo "${current_cluster}" ) \
            | fzf -0 -1 --tac -q "${1:-""}" --prompt "> " --preview '
            echo "--==={ {} }===--\n"  && \
            echo "cluster name: " && \
            kubectl config view -o jsonpath="{range .contexts[?(@.name == {} )].context}{@.cluster}{end}" && \
            echo "\n" && \
            echo "server endpoint: " && \
            kubectl config view -o jsonpath="{.clusters[?(@.name == {} )].cluster.server}"
            echo "\n" && \
            echo "user: " && \
            kubectl config view -o jsonpath="{range .contexts[?(@.name == {} )].context}{@.user}{end}"
            echo "\n" && \
            echo "current namespace: " && \
            kubectl config view -o jsonpath="{range .contexts[?(@.name == {} )].context}{@.namespace}{end}"')
  if [ ! -z "$selected" ]; then
    kubectl config use-context "${selected}" >/dev/null
    namespace=$(kubectl config view -o jsonpath="{.contexts[?(@.name == \"${selected}\")].context.namespace}")
    message_green "Cluster set to --==={ ${selected} | ${namespace:-default} }===--"
  fi
}

change_namespace_context(){
  if ! echo $(kubectl get ns --no-headers=true -o custom-columns=":metadata.name" | tr "\n"  " ") | ${grep} -wq ${namespace:-empty}
  then
    namespace=""
  fi

  if [ -z "${namespace}" ]
  then
    current_cluster="$(kubectl config current-context)"
    current_namespace=$(kubectl config view -o jsonpath="{.contexts[?(@.name == \"${current_cluster}\")].context.namespace}")
    selected=$((kubectl get namespaces -o=jsonpath="{.items[?(@.metadata.name!='${current_namespace:-default}')].metadata.name}" | \
              xargs -n 1; echo ${current_namespace:-default}) \
              | fzf -0 -1 --tac -q "${1:-""}" --prompt "> " --preview '\
              echo "--==={ $(kubectl config current-context) }===--\n"  && \
              kubectl --namespace {} get pods')
  else
    selected=$namespace
  fi
  if [ ! -z "$selected" ]; then
    kubectl config set-context --current "--namespace=$selected" >/dev/null
    message_green "Namespace set to --==={ ${selected} }===--"
  fi
}

kubectl_all(){
  current_cluster=$(kubectl config current-context)
  current_ns=$(kubectl config view -o jsonpath="{range .contexts[?(@.name == \"${current_cluster}\" )].context}{@.namespace}{end}")
  message_yellow "--==={ ${current_cluster} | ${current_ns:-default} }===--"
  if echo "${command}" | ${grep} -qx exec
  then
    selected=$((kubectl get pods --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' --sort-by=.metadata.name ) \
              | fzf -0 -1 --tac  --prompt "$current_ns > " --preview '\
              echo "--==={ $(kubectl config current-context) }===--\n"  && \
              kubectl describe pod {}')
    kubectl exec -it ${selected} -- bash||sh||ash||ksh </dev/tty
  elif echo "${command}" | ${grep} -qx logs
  then
    selected=$((kubectl get pods --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' --sort-by=.metadata.name ) \
              | fzf -0 -1 --tac  --prompt "$current_ns > " --preview '\
              echo "--==={ $(kubectl config current-context) }===--\n"  && \
              kubectl describe pod {}')
    kubectl logs -f ${selected} --tail=100
  else
    if echo "${command}" | ${grep} -q exec
    then
      kubectl ${command} </dev/tty
    else
      kubectl ${command}
    fi
  fi
}

test_duplicates(){
  if [ -f ~/.kube/config ]
  then
    if ${grep} -v "\- ${cluster_name}" ~/.kube/config | ${grep} -wq ${cluster_name} || ${grep} -wq ${cluster_alias:-213412341} ~/.kube/config
    then
      error "A cluster with this name is already in the config ${cluster_name} ${cluster_alias}. Please specify an alias or change the name of the cluster"
      return 1
    fi
  fi
}

add_cluster(){
  aws eks update-kubeconfig ${aws_eks_args[@]}
}

change_cluster_name(){
  echo "cluster name is ${cluster_name}"
  cluster_arn=`${grep} arn:aws:eks ~/.kube/config | ${grep} ${cluster_name} | awk '{print $2}' | ${grep} eks | head -1`
  if [ -z ${cluster_alias} ]
  then
    ${sed} "s|${cluster_arn}|${cluster_name}|g" -i ~/.kube/config
  elif [ ! -z ${cluster_alias} ] && [ ! -z ${mfa_profile} ]
  then
    ${sed} "s|${cluster_arn}|${cluster_alias}--${mfa_profile}-mfa|g" -i ~/.kube/config
    ${sed} "s|name: ${cluster_name}|name: ${cluster_alias}--${mfa_profile}-mfa|g" -i ~/.kube/config
  else
    ${sed} "s|${cluster_arn}|${cluster_alias}|g" -i ~/.kube/config
    ${sed} "s|name: ${cluster_name}|name: ${cluster_alias}|g" -i ~/.kube/config
  fi
}

set_kubectl_iam_auth() {
  if [ -z ${cluster_alias} ]
  then
    cluster_=${cluster_name}
  elif [ ! -z ${cluster_alias} ] && [ ! -z ${mfa_profile} ]
  then
    cluster_=${cluster_alias}--${mfa_profile}-mfa
  else
    cluster_=${cluster_alias}
  fi

  if [ -z ${iam_role} ]
  then
    iam_role=`aws configure get role_arn --profile ${profile}`
  fi

  if [ -z ${kubectl_exec_args} ]
  then
    kubectl_exec_args="token,-i,${cluster_name},-r,${iam_role}"
  fi

  if [ ! -z $mfa_profile ]
  then
    kubectl config set-credentials ${cluster_} --exec-arg="${kubectl_exec_args}" --exec-command=aws-iam-authenticator --exec-env=AWS_PROFILE=mfa_session_${mfa_profile}
  fi
}

test_cmd(){
  if ! command -v $1 > /dev/null
  then
    return 1
  fi
}

test_mfa(){
  cluster_name=`kubectl config current-context`
  m1=${cluster_name##*--}
  if [ "${m1##*-}" == "mfa" ]
  then
    generate_mfa=true
    mfa_account=${m1%-*}
    temp_mfa_file=/tmp/mfa_timestamp_${mfa_account}
  fi

# test if the mfa_profile is configured in the aws/credentials. If not use the default profile.
  if aws configure list --profile ${mfa_account} > /dev/null 2>&1
  then
    aws_mfa_account="--profile ${mfa_account}"
  else
    aws_mfa_account="--profile default"
  fi
}

create_new_session(){
  if test_cmd ykman
  then
    MFA_TOKEN=$(ykman oath code ${mfa_account} -s)
  else
    echo "Insert an MFA token:"
    read MFA_TOKEN
  fi

  MFA=$(aws configure get mfa_serial ${aws_mfa_account})
  json=$(aws sts get-session-token  --serial-number ${MFA} --token-code ${MFA_TOKEN} --duration-seconds ${session_duration} ${aws_mfa_account})

  if ! echo "$json" | ${grep} -q AccessKeyId
  then
    error "$json"
    return 1
  fi

  AWS_ACCESS_KEY_ID=$(echo "$json" | jq -r '.Credentials.AccessKeyId')
  AWS_SECRET_ACCESS_KEY=$(echo "$json" | jq -r '.Credentials.SecretAccessKey')
  AWS_SESSION_TOKEN=$(echo "$json" | jq -r '.Credentials.SessionToken')

  aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} --profile mfa_session_${mfa_account}
  aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}  --profile mfa_session_${mfa_account}
  aws configure set aws_session_token ${AWS_SESSION_TOKEN}  --profile mfa_session_${mfa_account}

  echo $(date +"%s") > /tmp/mfa_timestamp_${mfa_account}
}

update_km(){
  km_version=$2
  curl_check="curl -sL https://raw.githubusercontent.com/cststack/km/${2:-master}/bin/km"
  latest_version=$(${curl_check} | grep version= | head -1 | awk -F'=' '{print $2}')

  if [ "$1" == "now" ] || [ "$1" == "--now" ]
  then
    ${curl_check} -o /usr/local/bin/km
    chmod +x /usr/local/bin/km
    message_green Updated to $latest_version
  elif [ "$1" == "check" ] || [ "$1" == "" ] || [ "$1" == "--check" ]
  then
    if [ "${latest_version}" != "$version" ]
    then
      message_yellow "Please update your local km. Latest version is ${latest_version}. \nLocal install is $version. \nRun \"km update now\" to get the latest update"
    else
      message_green Latest version is ${latest_version}. Local install is $version
    fi
  fi
}

import_kubeconfig() {
  # function copied from https://github.com/kubernetes/kubernetes/issues/46381#issuecomment-461404505
  KUBECONFIG=~/.kube/config:$1 kubectl config view --flatten > ~/.kube/mergedkub && mv -f ~/.kube/mergedkub ~/.kube/config
}

MAIN
